"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PiralInstanceWebpackPlugin = void 0;
var webpack_1 = require("webpack");
var helpers_1 = require("./helpers");
var pluginName = 'PiralInstanceWebpackPlugin';
var PiralInstanceWebpackPlugin = /** @class */ (function () {
    function PiralInstanceWebpackPlugin(options) {
        this.options = options;
    }
    PiralInstanceWebpackPlugin.prototype.apply = function (compiler) {
        var _a = this.options, name = _a.name, version = _a.version, debug = _a.debug, emulator = _a.emulator, externals = _a.externals;
        var environment = process.env.NODE_ENV || 'development';
        var variables = __assign(__assign({}, (0, helpers_1.getVariables)(name, version, externals, environment)), this.options.variables);
        if (debug) {
            variables.DEBUG_PIRAL = debug === true ? '1.0' : debug;
        }
        if (emulator) {
            variables.DEBUG_PILET = emulator === true ? '/$pilet-api' : emulator;
        }
        var plugins = [new webpack_1.DefinePlugin((0, helpers_1.getDefineVariables)(variables))];
        (0, helpers_1.setEnvironment)(variables);
        plugins.forEach(function (plugin) { return plugin.apply(compiler); });
        compiler.hooks.afterEnvironment.tap(pluginName, function () { });
    };
    return PiralInstanceWebpackPlugin;
}());
exports.PiralInstanceWebpackPlugin = PiralInstanceWebpackPlugin;
//# sourceMappingURL=index.js.map