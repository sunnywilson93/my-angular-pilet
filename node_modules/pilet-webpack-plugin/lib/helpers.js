"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.withExternals = exports.getDependencies = exports.getExternals = exports.getDefineVariables = exports.setEnvironment = exports.getVariables = void 0;
function getVariables(name, version, env) {
    return {
        NODE_ENV: env,
        BUILD_TIME: new Date().toDateString(),
        BUILD_TIME_FULL: new Date().toISOString(),
        BUILD_PCKG_VERSION: version,
        BUILD_PCKG_NAME: name,
    };
}
exports.getVariables = getVariables;
function setEnvironment(variables) {
    Object.keys(variables).forEach(function (key) { return (process.env[key] = variables[key]); });
}
exports.setEnvironment = setEnvironment;
function getDefineVariables(variables) {
    return Object.entries(variables).reduce(function (obj, _a) {
        var name = _a[0], value = _a[1];
        obj["process.env.".concat(name)] = JSON.stringify(value);
        return obj;
    }, {});
}
exports.getDefineVariables = getDefineVariables;
function getExternals(piral) {
    var _a, _b;
    var shellPkg = require("".concat(piral, "/package.json"));
    var piralExternals = (_b = (_a = shellPkg.pilets) === null || _a === void 0 ? void 0 : _a.externals) !== null && _b !== void 0 ? _b : [];
    return __spreadArray(__spreadArray([], piralExternals, true), [
        '@dbeining/react-atom',
        '@libre/atom',
        'history',
        'react',
        'react-dom',
        'react-router',
        'react-router-dom',
        'tslib',
        'path-to-regexp',
    ], false);
}
exports.getExternals = getExternals;
function getDependencies(importmap, compilerOptions) {
    var dependencies = {};
    var entry = compilerOptions.entry, externals = compilerOptions.externals;
    if (typeof entry === 'object' && entry && Array.isArray(externals) && typeof externals[0] === 'object') {
        for (var _i = 0, importmap_1 = importmap; _i < importmap_1.length; _i++) {
            var dep = importmap_1[_i];
            dependencies[dep.id] = dep.ref;
            externals[0][dep.name] = dep.requireId || dep.id;
            if (dep.type === 'local') {
                entry[dep.ref.replace(/\.js$/, '')] = dep.entry;
            }
        }
    }
    return dependencies;
}
exports.getDependencies = getDependencies;
function withExternals(compilerOptions, externals) {
    var current = compilerOptions.externals || [];
    var arrayExternals = Array.isArray(current) ? current : [current];
    var objectExternal = externals.reduce(function (external, dep) {
        external[dep] = dep;
        return external;
    }, {});
    var newExternals = arrayExternals.filter(function (external) {
        if (typeof external === 'object' && Object.keys(external).length) {
            for (var dep in external) {
                objectExternal[dep] = external[dep];
            }
            return false;
        }
        return true;
    });
    compilerOptions.externals = __spreadArray([objectExternal], newExternals, true);
}
exports.withExternals = withExternals;
//# sourceMappingURL=helpers.js.map