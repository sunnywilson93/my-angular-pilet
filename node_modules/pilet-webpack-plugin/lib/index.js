"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PiletWebpackPlugin = void 0;
var webpack_1 = require("webpack");
var helpers_1 = require("./helpers");
var pluginName = 'PiletWebpackPlugin';
var PiletWebpackPlugin = /** @class */ (function () {
    function PiletWebpackPlugin(options) {
        this.options = options;
    }
    PiletWebpackPlugin.prototype.piletVxWebpackConfigEnhancer = function (compiler) {
        var config = compiler.options;
        (0, helpers_1.setEnvironment)(this.variables);
        (0, helpers_1.withExternals)(config, this.externals);
        var plugins = [new webpack_1.DefinePlugin((0, helpers_1.getDefineVariables)(this.variables))];
        compiler.hooks.afterEnvironment.tap(pluginName, function () { });
        return plugins;
    };
    PiletWebpackPlugin.prototype.piletV0WebpackConfigEnhancer = function (compiler) {
        var name = this.options.name;
        var config = compiler.options;
        var shortName = name.replace(/\W/gi, '');
        var prName = "wp4Chunkpr_".concat(shortName);
        var mainEntry = Object.keys(config.entry)[0];
        (0, helpers_1.setEnvironment)(this.variables);
        (0, helpers_1.withExternals)(config, this.externals);
        var plugins = [
            new webpack_1.DefinePlugin((0, helpers_1.getDefineVariables)(this.variables)),
            new webpack_1.BannerPlugin({
                banner: "//@pilet v:0",
                entryOnly: true,
                include: "".concat(mainEntry, ".js"),
                raw: true,
            }),
        ];
        compiler.hooks.afterEnvironment.tap(pluginName, function () {
            config.output.jsonpFunction = "".concat(prName);
            config.output.library = name;
            config.output.libraryTarget = 'umd';
        });
        return plugins;
    };
    PiletWebpackPlugin.prototype.piletV1WebpackConfigEnhancer = function (compiler) {
        var name = this.options.name;
        var config = compiler.options;
        var shortName = name.replace(/\W/gi, '');
        var prName = "wp4Chunkpr_".concat(shortName);
        var mainEntry = Object.keys(config.entry)[0];
        (0, helpers_1.setEnvironment)(this.variables);
        (0, helpers_1.withExternals)(config, this.externals);
        var plugins = [
            new webpack_1.DefinePlugin((0, helpers_1.getDefineVariables)(this.variables)),
            new webpack_1.BannerPlugin({
                banner: "//@pilet v:1(".concat(prName, ")"),
                entryOnly: true,
                include: "".concat(mainEntry, ".js"),
                raw: true,
            }),
        ];
        compiler.hooks.afterEnvironment.tap(pluginName, function () {
            config.output.jsonpFunction = "".concat(prName);
            config.output.library = name;
            config.output.libraryTarget = 'umd';
            config.output.auxiliaryComment = {
                commonjs2: "\nfunction define(d,k){if(typeof document!=='undefined'){var _r=".concat(prName, ";delete ").concat(prName, ";document.currentScript.app=k.apply(null,d.map(_r))}}define.amd=!0;"),
            };
        });
        return plugins;
    };
    PiletWebpackPlugin.prototype.piletV2WebpackConfigEnhancer = function (compiler) {
        var _a = this.options, name = _a.name, importmap = _a.importmap;
        var config = compiler.options;
        var shortName = name.replace(/\W/gi, '');
        var prName = "wp4Chunkpr_".concat(shortName);
        var mainEntry = Object.keys(config.entry)[0];
        (0, helpers_1.withExternals)(config, this.externals);
        (0, helpers_1.setEnvironment)(this.variables);
        var dependencies = (0, helpers_1.getDependencies)(importmap, config);
        var plugins = [
            new webpack_1.DefinePlugin((0, helpers_1.getDefineVariables)(this.variables)),
            new webpack_1.BannerPlugin({
                banner: "//@pilet v:2(".concat(prName, ",").concat(JSON.stringify(dependencies), ")"),
                entryOnly: true,
                include: "".concat(mainEntry, ".js"),
                raw: true,
            }),
        ];
        compiler.hooks.afterEnvironment.tap(pluginName, function () {
            config.module.rules.push({ parser: { system: false } });
            config.output.jsonpFunction = "".concat(prName);
            config.output.libraryTarget = 'system';
        });
        return plugins;
    };
    PiletWebpackPlugin.prototype.setup = function (compiler) {
        var _a = this.options, name = _a.name, version = _a.version, piral = _a.piral, _b = _a.externals, externals = _b === void 0 ? (0, helpers_1.getExternals)(piral) : _b, schema = _a.schema;
        var environment = process.env.NODE_ENV || 'development';
        this.variables = __assign(__assign({}, (0, helpers_1.getVariables)(name, version, environment)), this.options.variables);
        this.externals = externals;
        switch (schema) {
            case 'v0':
                return this.piletV0WebpackConfigEnhancer(compiler);
            case 'v1':
                return this.piletV1WebpackConfigEnhancer(compiler);
            case 'v2':
                return this.piletV2WebpackConfigEnhancer(compiler);
            case 'none':
            default:
                return this.piletVxWebpackConfigEnhancer(compiler);
        }
    };
    PiletWebpackPlugin.prototype.apply = function (compiler) {
        var plugins = this.setup(compiler);
        plugins.forEach(function (plugin) { return plugin.apply(compiler); });
    };
    return PiletWebpackPlugin;
}());
exports.PiletWebpackPlugin = PiletWebpackPlugin;
//# sourceMappingURL=index.js.map